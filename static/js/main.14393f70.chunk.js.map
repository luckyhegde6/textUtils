{"version":3,"sources":["Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","href","title","type","id","role","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","heading","textFormLabel","rows","value","onChange","event","target","upperCaseText","toLocaleUpperCase","toLocaleLowerCase","length","split","defaultProps","App","setMode","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6LAMA,SAASA,EAAOC,GAEhB,OACA,sBAAKC,UAAS,yCAAoCD,EAAME,KAA1C,eAAqDF,EAAME,MAAzE,UACE,sBAAKD,UAAU,kBAAf,UACE,mBAAGA,UAAU,eAAeE,KAAK,IAAjC,SAAsCH,EAAMI,QAC5C,wBAAQH,UAAU,iBAAiBI,KAAK,SAAS,iBAAe,WAAW,iBAAe,0BAA0B,gBAAc,yBAAyB,gBAAc,QAAQ,aAAW,oBAA5L,SACE,sBAAMJ,UAAU,0BAElB,qBAAKA,UAAU,2BAA2BK,GAAG,yBAA7C,SACE,oBAAIL,UAAU,kCAAd,SACE,oBAAIA,UAAU,WAAd,SACA,mBAAGA,UAAU,kBAAkB,eAAa,OAAOE,KAAK,KAAxD,2BAKN,sBAAKF,UAAU,sCAAf,UACA,uBAAOA,UAAU,mBAAmBI,KAAK,WAAWE,KAAK,SAASD,GAAG,yBAAyBE,QAASR,EAAMS,aAC7G,uBAAOR,UAAU,mBAAmBS,QAAQ,yBAA5C,wBAMcX,QC5BD,SAASY,EAASX,GAC/B,IAcA,EAAwBY,mBAAS,qCAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,OACE,gCACE,sBAAKb,UAAU,YAAf,UACE,6BAAKD,EAAMe,UACb,sBAAKd,UAAU,OAAf,UACE,uBAAOS,QAAQ,WAAWT,UAAU,aAApC,SAAkDD,EAAMgB,gBACxD,0BACEf,UAAU,eACVK,GAAG,WACHW,KAAK,IACLC,MAASL,EACTM,SA1Be,SAACC,GAC1BN,EAAQM,EAAMC,OAAOH,aA4Bf,wBAAQjB,UAAU,uBAAuBO,QA1BrB,WACtB,IAAIc,EAAeT,EAAKU,oBACxBT,EAAQQ,IAwBN,kCACA,wBAAQrB,UAAU,uBAAuBO,QAvBrB,WACtB,IAAIc,EAAeT,EAAKW,oBACxBV,EAAQQ,IAqBN,kCACA,wBAAQrB,UAAU,sBAAsBO,QApBpB,WACtBM,EAAQ,KAmBN,sBAEA,sBAAKb,UAAU,iBAAf,UACE,mDACA,8BAAIY,EAAKY,OAAT,YAA0BZ,EAAKa,MAAM,KAAKD,OAA1C,iBACA,8BAA6B,IAAzBZ,EAAKa,MAAM,KAAKD,OAApB,yBAEF,sBAAKxB,UAAU,iBAAf,UACE,yCACA,4BAAIY,UDRZd,EAAO4B,aAAe,CACpBvB,MAAQ,aCkBRO,EAASgB,aAAe,CAEtBX,cAAgB,wBAChBD,QAAU,mBCvCCa,MAff,WACE,MAAwBhB,mBAAS,SAAjC,mBAAOV,EAAP,KAAa2B,EAAb,KAIA,OACE,gCACE,cAAC,EAAD,CAAQzB,MAAM,YAAYF,KAAMA,EAAMO,WALvB,WACEoB,EAAV,UAAT3B,EAA2B,OAAkB,YAK3C,qBAAKD,UAAU,YAAf,SACE,cAACU,EAAD,CAAUI,QAAQ,qBCDXe,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.14393f70.chunk.js","sourcesContent":["import React from 'react';\r\nimport {\r\n  Link\r\n} from \"react-router-dom\";\r\nimport PropTypes from 'prop-types'\r\n\r\nfunction Navbar(props)\r\n{\r\nreturn(\r\n<nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n        <a className=\"nav-link active\" aria-current=\"page\" href=\"/#\">Home</a>\r\n        </li>\r\n      </ul>\r\n    </div>\r\n  </div>\r\n  <div className=\"form-check form-switch text-primary\">\r\n  <input className=\"form-check-input\" type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckChecked\" onClick={props.toggleMode} />\r\n  <label className=\"form-check-label\" htmlFor='flexSwitchCheckChecked'>Dark</label>\r\n</div>\r\n</nav>\r\n)\r\n}\r\n\r\nexport default  Navbar;\r\nNavbar.propTypes = {\r\n  title : PropTypes.string\r\n}\r\n\r\nNavbar.defaultProps = {\r\n  title : \"Textutils\"\r\n}\r\n\r\n\r\n","import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function TextForm(props) {\r\n  const onChangeHandle = (event) => {\r\nsetText(event.target.value);\r\n  }\r\n  const handleUpperCase = () => {\r\n    let upperCaseText =text.toLocaleUpperCase()\r\n    setText(upperCaseText);\r\n  }\r\n  const handleLowerCase = () => {\r\n    let upperCaseText =text.toLocaleLowerCase()\r\n    setText(upperCaseText);\r\n  }\r\n  const handleClearText = () => {\r\n    setText(\"\");\r\n  }\r\n  const [text, setText] = useState('Enter Text here..................');\r\n  return (\r\n    <div>\r\n      <div className=\"container\">\r\n        <h1>{props.heading}</h1>\r\n      <div className=\"mb-3\">\r\n        <label htmlFor=\"textForm\" className=\"form-label\">{props.textFormLabel}</label>\r\n        <textarea\r\n          className=\"form-control\"\r\n          id=\"textForm\"\r\n          rows=\"8\"\r\n          value = {text}\r\n          onChange={onChangeHandle}\r\n        ></textarea>\r\n      </div>\r\n      <button className=\"btn btn-primary mx-2\" onClick={handleUpperCase}>Convert to UpperCase</button> \r\n      <button className=\"btn btn-primary mx-2\" onClick={handleLowerCase}>Convert to LowerCase</button>\r\n      <button className=\"btn btn-danger mx-2\" onClick={handleClearText}>Clear</button>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h3>Your Text Summary</h3>\r\n        <p>{text.length} Words , {text.split(\" \").length} Characters</p>\r\n        <p>{text.split(\" \").length * 0.08} Minutes to read</p>\r\n      </div>\r\n      <div className=\"container my-3\">\r\n        <h3>Preview</h3> \r\n        <p>{text}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nTextForm.propTypes = {\r\n    textFormLabel : PropTypes.string,\r\n    heading : PropTypes.string\r\n  }\r\n\r\n  TextForm.defaultProps = {\r\n  \r\n    textFormLabel : \"Enter text to analyze\",\r\n    heading : \"Default heading\"\r\n  }\r\n  ","import React, { useState } from \"react\";\r\n\r\nimport Navbar from \"./Components/Navbar\";\r\nimport TextForm from \"./Components/TextForm\";\r\nfunction App() {\r\n  const [mode, setMode] = useState(\"light\");\r\n  const toggleMode = () => {\r\n    mode === \"light\" ? setMode(\"dark\") : setMode(\"light\");\r\n  };\r\n  return (\r\n    <div>\r\n      <Navbar title=\"TextUtils\" mode={mode} toggleMode={toggleMode} />\r\n      <div className=\"container\">\r\n        <TextForm heading=\"Text Utils\" />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}